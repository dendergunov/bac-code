openapi: 3.0.1
paths:
# Parameters exchange
  /vaults/{vaultUuid}/items:
    get:
      operationId: GetVaultItems
      parameters:
        - description: The UUID of the Vault to fetch Items from
          in: path
          name: vaultUuid
          required: true
          schema:
            pattern: ^[\da-z]{26}$
            type: string
        - description: Filter the Item collection based on Item name using SCIM eq filter
          in: query
          name: filter
          schema:
            example: title eq "Some Item Name"
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
          description: OK
        '401':
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid or missing token
        '404':
          content:
            application/json:
              example:
                message: vault {vaultUuid} not found
                status: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Vault not found
      security:
        - ConnectToken: [ ]
      summary: Get all items for inside a Vault
      tags:
        - Items
    post:
      operationId: CreateVaultItem
      parameters:
        - description: The UUID of the Vault to create an Item in
          in: path
          name: vaultUuid
          required: true
          schema:
            pattern: ^[\da-z]{26}$
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullItem'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullItem'
          description: OK
        '400':
          content:
            application/json:
              example:
                message: Invalid item category
                status: 400
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unable to create item due to invalid input
        '401':
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid or missing token
        '403':
          content:
            application/json:
              example:
                message: vault {vaultUuid} is not in scope
                status: 403
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unauthorized access
        '404':
          content:
            application/json:
              examples:
                vaultNotFound:
                  summary: Vault not found
                  value:
                    message: vault {vaultUuid} not found
                    status: 404
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Item not found
      security:
        - ConnectToken: [ ]
      summary: Create a new Item
      tags:
        - Items
# Array enumeration
  "/accountHolders/array":
    get:
      description: Returns specified account holders.
      parameters:
        - description: List of unique identifiers of the account holders.
          in: query
          name: id
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountHolder"
          description: OK - the request has succeeded.
        # Keep only "200" and "401" and "403"
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      tags:
        - Account holders
    # No tests
# No tests
  "/accounts":
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountHolder"
          description: OK - the request has succeeded.
        # Keep only "200" and "401" and "403"
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
      tags:
        - Account holders
      security: [ ]
# Wildcard
  "/accountHolders/{ID}":
    get:
      description: Returns a specific account holder.
      parameters:
        - description: Unique identifier of the account holder.
          in: path
          name: ID
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountHolder"
          description: OK - the request has succeeded.
        # Keep only "200" and "401" and "403"
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      tags:
        - Account holders